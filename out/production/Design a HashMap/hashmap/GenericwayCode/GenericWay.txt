package hashmap;

public class MyHashMap<K, V> {

    // Inner Node class
    public class Node {
        K key;
        V value;
        Node next;

        public Node(K key, V value) {
            this.key = key;
            this.value = value;
            this.next = null;
        }
    }

    private Node[] buckets;       // Generic array
    private float loadFactor;
    private int capacity;
    private int size;

    @SuppressWarnings("unchecked")  // ✅ suppress generic array creation warning
    public MyHashMap() {
        this.capacity = 4;
        this.loadFactor = 0.75f;
        this.buckets = (Node[]) new Node[capacity];  // ✅ safe now
        this.size = 0;
    }

    // Hash function
    private int getBucketIndex(K key) {
        int hashcode = key.hashCode();
        return Math.abs(hashcode) % capacity;
    }

    // Put key-value
    public void put(K key, V value) {
        int index = getBucketIndex(key);
        Node head = buckets[index];

        // Check if key already exists
        while (head != null) {
            if (head.key.equals(key)) {
                head.value = value; // update
                return;
            }
            head = head.next;
        }

        // Insert new node at beginning
        Node newNode = new Node(key, value);
        newNode.next = buckets[index];
        buckets[index] = newNode;
        size++;

        // Resize if needed
        if ((float) size / capacity >= loadFactor) {
            resize();
        }
    }

    // Get value by key
    public V get(K key) {
        int index = getBucketIndex(key);
        Node head = buckets[index];

        while (head != null) {
            if (head.key.equals(key)) {
                return head.value;
            }
            head = head.next;
        }

        return null; // not found
    }

    // Resize array when load factor exceeded
    @SuppressWarnings("unchecked")
    private void resize() {
        int newCapacity = capacity * 2;
        Node[] newBuckets = (Node[]) new Node[newCapacity];

        for (int i = 0; i < capacity; i++) {
            Node head = buckets[i];
            while (head != null) {
                Node next = head.next;
                int index = Math.abs(head.key.hashCode()) % newCapacity;

                head.next = newBuckets[index];
                newBuckets[index] = head;

                head = next;
            }
        }

        buckets = newBuckets;
        capacity = newCapacity;
    }
}
